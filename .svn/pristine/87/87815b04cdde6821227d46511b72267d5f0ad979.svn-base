package com.hitchtransporter.transporter.Activities;

import android.os.AsyncTask;
import android.os.Handler;
import android.support.design.widget.Snackbar;
import android.support.v4.content.ContextCompat;
import android.support.v4.widget.NestedScrollView;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.hitchtransporter.R;
import com.hitchtransporter.smart.common.DirectionsJSONParser;
import com.hitchtransporter.smart.customViews.RoundedImageView;
import com.hitchtransporter.smart.customViews.SmartTextView;
import com.hitchtransporter.smart.framework.SmartApplication;
import com.hitchtransporter.smart.framework.SmartUtils;
import com.hitchtransporter.smart.weservice.SmartWebManager;
import com.hitchtransporter.transporter.AA_Classes.MasterActivity;
import com.hitchtransporter.transporter.AA_Classes.MySupportMapFragment;
import com.squareup.picasso.Picasso;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.hitchtransporter.smart.framework.SmartUtils.checkIfUser;
import static com.hitchtransporter.smart.framework.SmartUtils.createDrawableFromView;
import static com.hitchtransporter.smart.framework.SmartUtils.decimalFormatter;
import static com.hitchtransporter.smart.framework.SmartUtils.getLanguageCode;
import static com.hitchtransporter.smart.framework.SmartUtils.getLatitude;
import static com.hitchtransporter.smart.framework.SmartUtils.getLongitude;

/**
 * Created by ebiztrait321 on 3/1/18.
 */

public class TrackerUser extends MasterActivity implements OnMapReadyCallback {

    private JSONObject orderDetailJson;

    private NestedScrollView trackerScroll;
    private RoundedImageView imageTrackerTv;
    private SmartTextView nameTrackerTv;
    private MySupportMapFragment trackerMap;
    private SmartTextView distanceTrackerTv;
    private SmartTextView pickupAddressTrackerTv;
    private SmartTextView dropoffAddressTrackerTv;

    Double dropOffLatitude;
    Double dropOffLongitude;
    Double pickUpLatitude;
    Double pickUpLongitude;
    Double currentLatitude;
    Double currentLongitude;

    private String orderId;
    private String pickupAddress;
    private String dropoffAddress;

    private GoogleMap mMap;

    private boolean isTrackingStarted = false;

    private ArrayList<LatLng> trackingLatLngs = new ArrayList<>();

    private Handler mHandler = new Handler();


    @Override
    public int getLayoutID() {
        return R.layout.activity_tracker;
    }

    @Override
    public void prepareViews() {
        super.prepareViews();
        setSwitch(false);
        setHeaderToolbar(getString(R.string.tracker_screen));
    }

    @Override
    public void initComponents() {
        super.initComponents();

        trackerScroll = findViewById(R.id.tracker_scroll);

        imageTrackerTv = findViewById(R.id.image_tracker_iv);
        nameTrackerTv = findViewById(R.id.name_tracker_tv);
        distanceTrackerTv = findViewById(R.id.distance_tracker_tv);
        pickupAddressTrackerTv = findViewById(R.id.pickup_tracker_tv);
        dropoffAddressTrackerTv = findViewById(R.id.dropoff_tracker_tv);


        trackerMap = (MySupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.tracker_map);

        if (trackerMap != null)
            trackerMap.setListener(new MySupportMapFragment.OnTouchListener() {
                @Override
                public void onTouch() {
                    trackerScroll.requestDisallowInterceptTouchEvent(true); //to monitor the touch events
                }
            });


    }

    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------

    private void getAndSetOrderDetails(String order_request_id) {
        SmartUtils.showLoadingDialog(TrackerUser.this);

        Map<String, String> params = new HashMap<>();
        params.put(LANGUAGE, getLanguageCode());
        params.put(ORDER_REQUEST_ID, order_request_id);
        params.put(CURRENT_LATITUDE, getLatitude());
        params.put(CURRENT_LONGITUDE, getLongitude());

        HashMap<SmartWebManager.REQUEST_METHOD_PARAMS, Object> requestParams = new HashMap<>();
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.URL, getString(R.string.domain_name_local) + "getOrderDetail");
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.CONTEXT, TrackerUser.this);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.PARAMS, params);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.RESPONSE_LISTENER, new SmartWebManager.OnResponseReceivedListener() {

            @Override
            public void onResponseReceived(final JSONObject response, boolean isValidResponse, int responseCode) {
                SmartUtils.hideLoadingDialog();
                if (responseCode == 200) {
                    Log.e("@@ORDER_DETAILS", response.toString());
                    try {
                        orderDetailJson = response.getJSONObject(DATA).getJSONObject("order_detail");
                        nameTrackerTv.setText(orderDetailJson.getString(TRANSPORTER_NAME));
                        if (!TextUtils.isEmpty(orderDetailJson.getString(TRANSPORTER_IMAGE))) {
                            Picasso.with(TrackerUser.this).load(orderDetailJson.getString(TRANSPORTER_IMAGE)).placeholder(R.drawable.profile_grey).into(imageTrackerTv);
                        }
                        orderId = orderDetailJson.getString(ORDER_ID);
                        distanceTrackerTv.setText(decimalFormatter(orderDetailJson.getString(DISTANCE)) + " " + Km);

                        pickupAddress = orderDetailJson.getString(PICKUP_ADDRESS);
                        pickupAddressTrackerTv.setText(pickupAddress);

                        dropoffAddress = orderDetailJson.getString(DROPOFF_ADDRESS);
                        dropoffAddressTrackerTv.setText(dropoffAddress);


                        pickUpLatitude = Double.parseDouble(orderDetailJson.getString(PICKUP_LATITUDE));
                        pickUpLongitude = Double.parseDouble(orderDetailJson.getString(PICKUP_LONGITUDE));
                        dropOffLatitude = Double.parseDouble(orderDetailJson.getString(DROPOFF_LATITUDE));
                        dropOffLongitude = Double.parseDouble(orderDetailJson.getString(DROPOFF_LONGITUDE));

                        trackerMap.getMapAsync(TrackerUser.this);

                        receiveTransporterLocation(true);

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                } else if (responseCode == 400) {
                    try {
                        SmartUtils.showSnackBar(TrackerUser.this, response.getJSONObject(DATA).getString(MESSAGE), Snackbar.LENGTH_LONG);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onResponseError() {
                SmartUtils.hideLoadingDialog();
            }
        });
        SmartWebManager.getInstance(getApplicationContext()).addToRequestQueueMultipart(requestParams, "", true);
    }


    //----RECEIVING TRANSPORTER DATA-----------------------------------------------------------------------------------------------------------------------------------------------------


    private void receiveTransporterLocation(final boolean isInitial) {
        Map<String, String> params = new HashMap<>();
        params.put(LANGUAGE, getLanguageCode());
        params.put(ORDER_ID, orderId);
        if (isInitial) {
            params.put(IS_INITIAL, "1");
        } else {
            params.put(IS_INITIAL, "0");
        }

        HashMap<SmartWebManager.REQUEST_METHOD_PARAMS, Object> requestParams = new HashMap<>();

        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.URL, getString(R.string.domain_name_local) + "trackingOut");
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.CONTEXT, TrackerUser.this);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.PARAMS, params);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.RESPONSE_LISTENER, new SmartWebManager.OnResponseReceivedListener() {

            @Override
            public void onResponseReceived(final JSONObject response, boolean isValidResponse, int responseCode) {
                if (responseCode == 200) {
                    try {
                        JSONArray trackingData = response.getJSONArray(DATA);
                        if (trackingData.length() > 0) {
                            isTrackingStarted = true;
                            JSONArray lastTrackingData = response.getJSONArray(DATA);

                            mMap.clear();

                            for (int i = 0; i < lastTrackingData.length(); i++) {
                                LatLng position = new LatLng(Double.parseDouble(lastTrackingData.getJSONObject(i).getString(LATITUDE)),
                                        Double.parseDouble(lastTrackingData.getJSONObject(i).getString(LONGITUDE)));
                                trackingLatLngs.add(position);
                            }
                            currentLatitude = trackingLatLngs.get(trackingLatLngs.size() - 1).latitude;
                            currentLongitude = trackingLatLngs.get(trackingLatLngs.size() - 1).longitude;

                            setupMarkers();
                            drawTrackingPath(trackingLatLngs);
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                }
                    startRepeatingTask();
            }

            @Override
            public void onResponseError() {

            }
        });

        SmartWebManager.getInstance(TrackerUser.this).addToRequestQueueMultipart(requestParams, "", true);

    }

    //----DRAW ON MAP-----------------------------------------------------------------------------------------------------------------------------------------------------


    private void setupMarkers()  //setting up pick up location, drop off location and truck marker on the map
    {
        final View pickupMarkerView = TrackerUser.this.getLayoutInflater().inflate(R.layout.tracker_marker_info, null);
        final SmartTextView titlePickUpMarkerTv = pickupMarkerView.findViewById(R.id.title_marker_tv);
        final SmartTextView addressPickUpMarkerTv = pickupMarkerView.findViewById(R.id.address_marker_tv);

        titlePickUpMarkerTv.setText(getString(R.string.pickup_location));
        addressPickUpMarkerTv.setText(pickupAddress);


        final View dropOffMarkerView = TrackerUser.this.getLayoutInflater().inflate(R.layout.tracker_marker_info, null);
        final SmartTextView titleDroppOffMarkerTv = dropOffMarkerView.findViewById(R.id.title_marker_tv);
        final SmartTextView addressDroppOffMarkerTv = dropOffMarkerView.findViewById(R.id.address_marker_tv);


        titleDroppOffMarkerTv.setText(getString(R.string.dropoff_location));
        addressDroppOffMarkerTv.setText(dropoffAddress);

        mMap.addMarker(new MarkerOptions().position(new LatLng(pickUpLatitude, pickUpLongitude)).icon(BitmapDescriptorFactory.fromBitmap(createDrawableFromView(TrackerUser.this, pickupMarkerView))));

        mMap.addMarker(new MarkerOptions().position(new LatLng(dropOffLatitude, dropOffLongitude)).icon(BitmapDescriptorFactory.fromBitmap(createDrawableFromView(TrackerUser.this, dropOffMarkerView))));

        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(pickUpLatitude, pickUpLongitude), 14));


    }


    private void drawTrackingPath(ArrayList<LatLng> trackingLatLongInner) {
        PolylineOptions polyOptions = new PolylineOptions();
        polyOptions.color(ContextCompat.getColor(TrackerUser.this, R.color.accent));
        polyOptions.width(10);
        polyOptions.addAll(trackingLatLongInner);
        mMap.addPolyline(polyOptions);
        mMap.addMarker(new MarkerOptions().position(new LatLng(currentLatitude, currentLongitude)).icon(BitmapDescriptorFactory.fromResource(R.drawable.track)));
        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(currentLatitude, currentLongitude), 14));
    }


    //DOING THE MAP THING--------------------------------------------------------------------------------------------------------------------------


    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        if (pickUpLatitude != null) {
            LatLng startPoint = new LatLng(pickUpLatitude, pickUpLongitude);
            LatLng endPoint = new LatLng(dropOffLatitude, dropOffLongitude);

            String url = getDirectionsUrl(startPoint, endPoint);
            DownloadTask downloadTask = new DownloadTask();
            downloadTask.execute(url);
        }
    }

    private class DownloadTask extends AsyncTask<String, Void, String> {

        @Override
        protected String doInBackground(String... url) {
            String data = "";
            try {
                data = downloadUrl(url[0]);
                Log.d("@@Map_Data", data);

            } catch (Exception e) {
                Log.d("Background Task", e.toString());
            }
            return data;
        }

        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);
            ParserTask parserTask = new ParserTask();
            parserTask.execute(result);
        }
    }

    /**
     * A class to parse the Google Places in JSON format
     */
    private class ParserTask extends AsyncTask<String, Integer, List<List<HashMap<String, String>>>> {

        // Parsing the data in non-ui thread

        @Override
        protected List<List<HashMap<String, String>>> doInBackground(String... jsonData) {
            List<List<HashMap<String, String>>> routes = null;
            try {
                JSONObject jObject = new JSONObject(jsonData[0]);

                DirectionsJSONParser parser = new DirectionsJSONParser();
                routes = parser.parse(jObject);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return routes;
        }


        @Override
        protected void onPostExecute(List<List<HashMap<String, String>>> result) {


            ArrayList<LatLng> points = new ArrayList();
            PolylineOptions lineOptions = new PolylineOptions();
            for (int i = 0; i < result.size(); i++) {

                List<HashMap<String, String>> path = result.get(i);
                for (int j = 0; j < path.size(); j++) {
                    HashMap<String, String> point = path.get(j);
                    double lat = Double.parseDouble(point.get("lat"));
                    double lng = Double.parseDouble(point.get("lng"));
                    LatLng position = new LatLng(lat, lng);
                    points.add(position);
                }
                lineOptions.addAll(points);
                lineOptions.width(12);
                lineOptions.color(ContextCompat.getColor(TrackerUser.this, R.color.accent));
                lineOptions.geodesic(true);
            }
            // Drawing polyline in the Google Map for the i-th route

            if (points.size() > 0) {
                mMap.clear();
                mMap.addPolyline(lineOptions);
                setupMarkers();
            }
        }

    }

    private String getDirectionsUrl(LatLng origin, LatLng dest) {
        // Origin of route
        String str_origin = "origin=" + origin.latitude + "," + origin.longitude;
        // Destination of route
        String str_dest = "destination=" + dest.latitude + "," + dest.longitude;
        // Sensor enabled
        String sensor = "sensor=false";
        String mode = "mode=driving";
        // Building the parameters to the web service
        String parameters = str_origin + "&" + str_dest + "&" + sensor + "&" + mode;
        // Output format
        String output = "json";
        // Building the url to the web service
        return "https://maps.googleapis.com/maps/api/directions/" + output + "?" + parameters;
    }

    /**
     * A method to download json data from url
     */
    private String downloadUrl(String strUrl) throws IOException {
        String data = "";
        InputStream iStream = null;
        HttpURLConnection urlConnection = null;
        try {
            URL url = new URL(strUrl);

            urlConnection = (HttpURLConnection) url.openConnection();

            urlConnection.connect();

            iStream = urlConnection.getInputStream();

            BufferedReader br = new BufferedReader(new InputStreamReader(iStream));

            StringBuffer sb = new StringBuffer();

            String line = "";
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }

            data = sb.toString();

            br.close();

        } catch (Exception e) {
            Log.d("Exception", e.toString());
        } finally {
            iStream.close();
            urlConnection.disconnect();
        }
        return data;
    }

    //REPEAT GETTING INFORMATION--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    Runnable mStatusChecker = new Runnable() {
        @Override
        public void run() {
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    receiveTransporterLocation(false);
                }
            };
            mHandler.postDelayed(runnable, 10000);
        }
    };

    void startRepeatingTask() {
        mStatusChecker.run();
    }


    void stopRepeatingTask() {
        if (mHandler != null) {
            mHandler.removeCallbacks(mStatusChecker);
            mHandler.removeCallbacksAndMessages(null);
        }
    }


    @Override
    protected void onResume() {
        super.onResume();

        if (getIntent().getExtras() != null) {
            getAndSetOrderDetails(String.valueOf(getIntent().getExtras().get(ORDER_REQUEST_ID)));
        }
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (checkIfUser() && isTrackingStarted) {
            stopRepeatingTask();
        }
    }
}

  
