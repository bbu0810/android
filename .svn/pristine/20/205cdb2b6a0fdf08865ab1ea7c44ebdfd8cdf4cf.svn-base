package com.hitchtransporter.transporter.Activities;

import android.content.Intent;
import android.support.design.widget.Snackbar;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.Spinner;
import android.widget.Toast;

import com.hitchtransporter.transporter.AA_Classes.MasterActivity;
import com.stripe.android.Stripe;
import com.stripe.android.TokenCallback;
import com.stripe.android.model.Card;
import com.stripe.android.model.Token;
import com.hitchtransporter.R;
import com.hitchtransporter.smart.customViews.SmartButton;
import com.hitchtransporter.smart.customViews.SmartEditText;
import com.hitchtransporter.smart.customViews.SmartTextView;
import com.hitchtransporter.smart.framework.SmartApplication;
import com.hitchtransporter.smart.framework.SmartUtils;
import com.hitchtransporter.smart.weservice.SmartWebManager;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.hitchtransporter.smart.framework.SmartUtils.decimalFormatter;
import static com.hitchtransporter.smart.framework.SmartUtils.focusEditTextRed;
import static com.hitchtransporter.smart.framework.SmartUtils.getLanguageCode;

public class Payment extends MasterActivity {

    private SmartTextView balanceTv;
    private SmartEditText cardNoEt;
    private Spinner monthSpn;
    private Spinner yearSpn;
    private SmartEditText cvvEt;
    private CheckBox saveCardCb;
    private SmartButton backBtn;
    private SmartButton confirmBtn;
    private List<String> months = new ArrayList<>();
    private List<String> years = new ArrayList<>();
    private int expMonth;
    private int expYear;
    private boolean isSaved = false;
    private JSONObject cardinfo;


    @Override
    public int getLayoutID() {
        return R.layout.activity_payment;
    }

    @Override
    public int getDrawerLayoutID() {
        return 0;
    }


    @Override
    public void initComponents() {
        super.initComponents();
        setHeaderToolbar(getString(R.string.payment));
        setSwitch(false);

        balanceTv = findViewById(R.id.balance_tv);
        cardNoEt = findViewById(R.id.card_no_et);
        monthSpn = findViewById(R.id.month_spn);
        yearSpn = findViewById(R.id.year_spn);
        cvvEt = findViewById(R.id.cvv_et);
        saveCardCb = findViewById(R.id.save_card_cb);
        backBtn = findViewById(R.id.back_btn);
        confirmBtn = findViewById(R.id.confirm_btn);

        months.add("MM");
        years.add("YYYY");

        for (int i = 1; i <= 12; i++) {
            if (i < 10) {
                months.add("0" + i);
            } else {
                months.add("" + i);
            }
        }

        for (int i = 2000; i <= 2040; i++) {
            years.add("" + i);
        }


        ArrayAdapter<String> dataAdapter1 = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, months);
        dataAdapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        monthSpn.setAdapter(dataAdapter1);

        ArrayAdapter<String> dataAdapter2 = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, years);
        dataAdapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        yearSpn.setAdapter(dataAdapter2);

        monthSpn.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                if (i > 0) {
                    expMonth = Integer.parseInt(adapterView.getItemAtPosition(i).toString());
                } else {
                    expMonth = 0;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        yearSpn.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                if (i > 0) {
                    expYear = Integer.parseInt(adapterView.getItemAtPosition(i).toString());
                } else {
                    expYear = 0;
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });

        balanceTv.setText(getString(R.string.charge) + decimalFormatter(getIntent().getStringExtra(AMOUNT)));
        getCreditCardInfo();
        //  balanceTv.setText(getString(R.string.charge) + 0.5);

    }

    @Override
    public void setActionListeners() {
        super.setActionListeners();
        confirmBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getCardInfo();
                //pay();
            }
        });

        backBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onBackPressed();
            }
        });

    }

    private void getCardInfo() {
        boolean isValid = true;
//        Card card = new Card(cardNoEt.getText().toString(), expMonth, expYear, cvvEt.getText().toString());

        Card card = new Card(cardNoEt.getText().toString(), expMonth, expYear, cvvEt.getText().toString());
      /*  if (card.validateCVC()) {
            isValid = false;
            focusEditTextRed(Payment.this, cvvEt, true, getString(R.string.cvv_validation),0);
        }
        if (card.validateCard()) {
            isValid = false;
            focusEditTextRed(Payment.this, cardNoEt, true, getString(R.string.card_validation),0);
        }*/
        if (expYear == 0) {
            isValid = false;
            SmartUtils.showSnackBar(Payment.this, getString(R.string.year_validation), Snackbar.LENGTH_LONG);
        }
        if (expMonth == 0) {
            isValid = false;
            SmartUtils.showSnackBar(Payment.this, getString(R.string.month_validation), Snackbar.LENGTH_LONG);
        }
        if (TextUtils.isEmpty(cvvEt.getText().toString())) {
            isValid = false;
            focusEditTextRed(Payment.this, cvvEt, true, getString(R.string.cvv_empty), 0);
        }
        if (TextUtils.isEmpty(cardNoEt.getText().toString())) {
            isValid = false;
            focusEditTextRed(Payment.this, cardNoEt, true, getString(R.string.card_empty), 0);
        }

        if (isValid) {
            // pay("asdf");

            Stripe stripe = new Stripe(Payment.this, getString(R.string.stripe_key_test));
//            Stripe stripe = new Stripe(Payment.this, getString(R.string.stripe_key));

            SmartUtils.showLoadingDialog(Payment.this);
            stripe.createToken(
                    card,
                    new TokenCallback() {

                        public void onSuccess(Token token) {
                            SmartUtils.hideLoadingDialog();
                            Log.d("@@Card_Token==", token.getId());
                            // balanceTv.setText(token.getId());
                            pay(token.getId());
                        }

                        public void onError(Exception error) {
                            SmartUtils.hideLoadingDialog();
                            SmartUtils.showSnackBar(Payment.this, getString(R.string.invalid_details), Snackbar.LENGTH_LONG);
//                            Toast.makeText(Payment.this, error.toString(), Toast.LENGTH_LONG).show();
                            Log.e("@@payment===", error.toString());
                        }
                    }
            );
        }
    }


    public void onNothingSelected(AdapterView<?> arg0) {
        // TODO Auto-generated method stub
    }

    private void getCreditCardInfo() {
        SmartUtils.showLoadingDialog(Payment.this);
        Map<String, String> params = new HashMap<>();
        if (SmartApplication.REF_SMART_APPLICATION.readSharedPreferences().getString(SELECTED_LOCALE, NO_DATA).equalsIgnoreCase(GERMAN_STR)) {
            params.put(LANGUAGE, GERMAN_CODE);
        } else {
            params.put(LANGUAGE, ENGLISH_CODE);
        }

        params.put(USER_ID, SmartApplication.REF_SMART_APPLICATION.readSharedPreferences().getString(USER_ID, NO_USER_ID));

        HashMap<SmartWebManager.REQUEST_METHOD_PARAMS, Object> requestParams = new HashMap<>();
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.URL, getString(R.string.domain_name_local) + "getcarddetail");
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.CONTEXT, Payment.this);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.PARAMS, params);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.RESPONSE_LISTENER, new SmartWebManager.OnResponseReceivedListener() {

            @Override
            public void onResponseReceived(final JSONObject response, boolean isValidResponse, int responseCode) {
                SmartUtils.hideLoadingDialog();
                if (responseCode == 200) {
                    try {
                        cardinfo = response.getJSONObject(DATA);
                        isSaved = true;
                        saveCardCb.setChecked(true);
                        cardNoEt.setText(cardinfo.getString(CARD_NUMBER));
                        expMonth = Integer.parseInt(cardinfo.getString(EXPIRY_MONTH));
                        expYear = Integer.parseInt(cardinfo.getString(EXPIRY_YEAR));

                        monthSpn.setSelection(expMonth);
                        for (int i = 0; i < years.size(); i++) {
                            if (years.get(i).equalsIgnoreCase(String.valueOf(expYear))) {
                                yearSpn.setSelection(i);
                            }
                        }
                        cvvEt.setText(cardinfo.getString(CVV));

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else if (responseCode == 400) {
                    try {
                        Log.d("@@Credit_card_info", response.getJSONObject(DATA).getString(MESSAGE));
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onResponseError() {
                SmartUtils.hideLoadingDialog();
            }
        });
        SmartWebManager.getInstance(getApplicationContext()).addToRequestQueueMultipart(requestParams, "", true);
    }

    private void pay(String token) {
        SmartUtils.showLoadingDialog(Payment.this);
        Map<String, String> params = new HashMap<>();
        params.put(LANGUAGE, getLanguageCode());
        params.put(ORDER_ID, getIntent().getStringExtra(ORDER_ID));
        params.put(USER_ID, SmartApplication.REF_SMART_APPLICATION.readSharedPreferences().getString(USER_ID, NO_USER_ID));
        params.put(TOKEN, token);
        // params.put(TOKEN, "tok_visa");

//        params.put(AMOUNT, decimalFormatter(getIntent().getStringExtra(AMOUNT)));
        double d = Double.parseDouble(getIntent().getStringExtra(AMOUNT)) * 100;
        int i = (int) d;
        params.put(AMOUNT, String.valueOf(i));
        //   params.put(AMOUNT, "150");


        if (saveCardCb.isChecked()) {
            params.put(IS_FAST_CHECKOUT, "1");
        } else {
            params.put(IS_FAST_CHECKOUT, "0");
        }

        params.put(CARD_NUMBER, cardNoEt.getText().toString());
        params.put(EXPIRY_MONTH,
                String.valueOf(expMonth));
        params.put(EXPIRY_YEAR, String.valueOf(expYear));
        params.put(CVV, cvvEt.getText().toString());

        HashMap<SmartWebManager.REQUEST_METHOD_PARAMS, Object> requestParams = new HashMap<>();
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.URL, getString(R.string.domain_name_local) + "orderPayment");
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.CONTEXT, Payment.this);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.PARAMS, params);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.RESPONSE_LISTENER, new SmartWebManager.OnResponseReceivedListener() {

            @Override
            public void onResponseReceived(final JSONObject response, boolean isValidResponse, int responseCode) {
                SmartUtils.hideLoadingDialog();
                if (responseCode == 200) {
                    try {
                        SmartUtils.showSnackBar(Payment.this, response.getJSONObject(DATA).getString(MESSAGE), Snackbar.LENGTH_LONG);
                        Toast.makeText(Payment.this, getString(R.string.payment_confirmed), Toast.LENGTH_LONG).show();

                        Intent intent = new Intent(Payment.this, Home.class);
                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                        intent.putExtra(SET_PAGE, ORDER_HISTORY);
                        startActivity(intent);
                        supportFinishAfterTransition();
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else if (responseCode == 400) {
                    try {
                        SmartUtils.showSnackBar(Payment.this, response.getJSONObject(DATA).getString(MESSAGE), Snackbar.LENGTH_LONG);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onResponseError() {
                SmartUtils.hideLoadingDialog();
            }
        });
        SmartWebManager.getInstance(getApplicationContext()).addToRequestQueueMultipart(requestParams, "", true);
    }

    @Override
    public void manageAppBar(ActionBar actionBar, Toolbar toolbar, ActionBarDrawerToggle actionBarDrawerToggle) {
        super.manageAppBar(actionBar, toolbar, actionBarDrawerToggle);
        toolbar.setNavigationIcon(R.drawable.ic_back_white);
        toolbar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });
    }
}
