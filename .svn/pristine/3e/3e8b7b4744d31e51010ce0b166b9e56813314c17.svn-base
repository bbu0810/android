package com.hitchtransporter.transporter.Activities;

import android.content.Intent;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.widget.DividerItemDecoration;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.hitchtransporter.transporter.AA_Classes.MasterActivity;
import com.squareup.picasso.Picasso;
import com.hitchtransporter.R;
import com.hitchtransporter.smart.customViews.RoundedImageView;
import com.hitchtransporter.smart.customViews.SmartButton;
import com.hitchtransporter.smart.customViews.SmartTextView;
import com.hitchtransporter.smart.framework.SmartApplication;
import com.hitchtransporter.smart.framework.SmartUtils;
import com.hitchtransporter.smart.weservice.SmartWebManager;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

import static com.hitchtransporter.smart.framework.SmartUtils.checkIfTransporter;
import static com.hitchtransporter.smart.framework.SmartUtils.dateFormatChanger;
import static com.hitchtransporter.smart.framework.SmartUtils.getLanguageCode;
import static com.hitchtransporter.smart.framework.SmartUtils.timeFormatChanger3;

public class Notification extends MasterActivity {

    private RecyclerView notificationRv;
    private NotificationAdapter notificationAdapter;
    private JSONArray notificationsJSON;
    private View noDataFound;
    private SmartTextView noDataFoundTv;

    @Override
    public void setActionListeners() {
        super.setActionListeners();
    }

    @Override
    public void prepareViews() {
        super.prepareViews();
        setHeaderToolbar(getString(R.string.notifications));
        setSwitch(true);
    }

    @Override
    public int getLayoutID() {
        return R.layout.activity_notification;
    }

    @Override
    public void initComponents() {
        super.initComponents();

        notificationRv = findViewById(R.id.notification_rv);
        noDataFound = findViewById(R.id.layout_no_data);
        noDataFoundTv = findViewById(R.id.no_data_found_tv);

        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(Notification.this);
        notificationRv.setLayoutManager(linearLayoutManager);
        DividerItemDecoration mDividerItemDecoration = new DividerItemDecoration(notificationRv.getContext(),
                linearLayoutManager.getOrientation());
        mDividerItemDecoration.setDrawable(ContextCompat.getDrawable(Notification.this, R.drawable.list_devider));
        notificationRv.addItemDecoration(mDividerItemDecoration);

        getNotifications();

    }

    private void getNotifications() {
        SmartUtils.showLoadingDialog(Notification.this);
        Map<String, String> params = new HashMap<>();
        params.put(LANGUAGE, getLanguageCode());
        params.put(USER_ID, SmartApplication.REF_SMART_APPLICATION.readSharedPreferences().getString(USER_ID, NO_USER_ID));

        HashMap<SmartWebManager.REQUEST_METHOD_PARAMS, Object> requestParams = new HashMap<>();
        if (checkIfTransporter()) {
            requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.URL, getString(R.string.domain_name_local) + "getTransporterNotification ");
        } else {
            requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.URL, getString(R.string.domain_name_local) + "getUserNotification");

        }
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.CONTEXT, Notification.this);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.PARAMS, params);
        requestParams.put(SmartWebManager.REQUEST_METHOD_PARAMS.RESPONSE_LISTENER, new SmartWebManager.OnResponseReceivedListener() {

            @Override
            public void onResponseReceived(final JSONObject response, boolean isValidResponse, int responseCode) {
                SmartUtils.hideLoadingDialog();
                if (responseCode == 200) {
                    Log.d("@@@Login_success", ": true");
                    try {
                        noDataFound.setVisibility(View.GONE);
                        notificationsJSON = response.getJSONObject(DATA).getJSONArray(NOTIFICATION_DETAIL);
                        notificationAdapter = new NotificationAdapter();
                        notificationRv.setAdapter(notificationAdapter);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else if (responseCode == 400) {
                    noDataFound.setVisibility(View.VISIBLE);
                    noDataFoundTv.setText(getString(R.string.no_notifications_found));
                }
            }

            @Override
            public void onResponseError() {

                SmartUtils.hideLoadingDialog();
            }
        });
        SmartWebManager.getInstance(getApplicationContext()).addToRequestQueueMultipart(requestParams, "", true);
    }

    private class NotificationAdapter extends RecyclerView.Adapter<NotificationAdapter.ViewHolder> {

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
            View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.row_notification, viewGroup, false);
            return new ViewHolder(v);
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, final int position) {

            try {
                if (!TextUtils.isEmpty(notificationsJSON.getJSONObject(position).getString(PROFILE_IMAGE))) {
                    Picasso.with(Notification.this).load(notificationsJSON.getJSONObject(position).getString(PROFILE_IMAGE)).placeholder(R.drawable.profile_grey).into(holder.notifiImageTv);
                }
                holder.notifiTitleTv.setText(notificationsJSON.getJSONObject(position).getString(NOTIFICATION_TITLE));
                holder.notifiDescTv.setText(notificationsJSON.getJSONObject(position).getString(NOTIFICATION_DESCRIPTION));
                holder.notifiTimeTv.setText(timeFormatChanger3(notificationsJSON.getJSONObject(position).getString(VIEW_DATE).split(" ")[1]));
                holder.notifiDateTv.setText(dateFormatChanger(notificationsJSON.getJSONObject(position).getString(VIEW_DATE).split(" ")[0]));
            } catch (JSONException e) {
                e.printStackTrace();
            }

            try {
                Intent intent = new Intent(Notification.this, Home.class);
                switch (notificationsJSON.getJSONObject(position).getString(TYPE)) {
                    case NEW_ORDER:
                        intent = new Intent(Notification.this, Home.class);
                        break;
                    case ORDER_PAYMENT:
                        intent = new Intent(Notification.this, Home.class);
                        break;
                    case ORDER_APPROVE:
                        if (notificationsJSON.getJSONObject(position).getString(IS_PAY).equalsIgnoreCase(STATUS_UNPAID)&&notificationsJSON.getJSONObject(position).getString(ORDER_STATUS).equalsIgnoreCase(STATUS_APPROVED)) {
                            intent = new Intent(Notification.this, Payment.class);
                            intent.putExtra(ORDER_ID, notificationsJSON.getJSONObject(position).getString(ORDER_ID));
                            intent.putExtra(AMOUNT, notificationsJSON.getJSONObject(position).getString(AMOUNT));

                            holder.notifiPaymentBtn.setVisibility(View.VISIBLE);
                            final Intent finalIntent1 = intent;
                            holder.notifiPaymentBtn.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    startActivity(finalIntent1);
                                    supportFinishAfterTransition();
                                }
                            });

                        }
                        break;
                    case ORDER_START:
                        intent = new Intent(Notification.this, Home.class);
                        intent.putExtra(SET_PAGE,ORDER_HISTORY);
                        break;
                    case ORDER_COMPLETE:
                        intent = new Intent(Notification.this, Home.class);
                        intent.putExtra(SET_PAGE,ORDER_HISTORY);
                        break;

                }

                final Intent finalIntent = intent;
                holder.itemView.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        startActivity(finalIntent);
                    }
                });
            } catch (JSONException e) {
                e.printStackTrace();
            }


        }

        @Override
        public int getItemCount() {
            return notificationsJSON.length();
        }

        public class ViewHolder extends RecyclerView.ViewHolder {

            private RoundedImageView notifiImageTv;
            private SmartTextView notifiTitleTv;
            private SmartTextView notifiDescTv;
            private SmartTextView notifiDateTv;
            private SmartTextView notifiTimeTv;
            private SmartButton notifiPaymentBtn;


            public ViewHolder(View itemView) {
                super(itemView);
                notifiImageTv = itemView.findViewById(R.id.notifi_image_tv);
                notifiTitleTv = itemView.findViewById(R.id.notifi_title_tv);
                notifiDescTv = itemView.findViewById(R.id.notifi_desc_tv);
                notifiDateTv = itemView.findViewById(R.id.notifi_date_tv);
                notifiTimeTv = itemView.findViewById(R.id.notifi_time_tv);
                notifiPaymentBtn = itemView.findViewById(R.id.notifi_payment_btn);
            }
        }
    }

    @Override
    public void manageAppBar(ActionBar actionBar, Toolbar toolbar, ActionBarDrawerToggle
            actionBarDrawerToggle) {
        super.manageAppBar(actionBar, toolbar, actionBarDrawerToggle);
        toolbar.setNavigationIcon(R.drawable.menu);
    }
}
